{"version":3,"file":"static/js/382.ad7c0263.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectNameFilter = state => state.filters.name;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectNameFilter],\n  (contacts, nameFilter) => {\n    const normalizedFilter = nameFilter.trim().toLowerCase();\n\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    const inAlphabeticalOrder = filteredContacts.sort(\n      (firstContact, secondContact) =>\n        firstContact.name.localeCompare(secondContact.name)\n    );\n\n    return inAlphabeticalOrder;\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { VStack, useToast } from '@chakra-ui/react';\nimport { Formik } from 'formik';\nimport { InputControl, SubmitButton } from 'formik-chakra-ui';\nimport * as Yup from 'yup';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const checkIsInContacts = newName =>\n    contacts.some(\n      ({ name }) => name.toLowerCase() === newName.toLowerCase().trim()\n    );\n\n  const onSubmit = async (values, { resetForm }) => {\n    const { name } = values;\n    const isInContacts = checkIsInContacts(name);\n\n    // don't add new contact when the name already exists\n    if (isInContacts) {\n      toast({\n        title: 'Failed to create new contact.',\n        description: `\"${name}\" is already in your contacts.`,\n        status: 'warning',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return false;\n    }\n\n    const { meta: res } = await dispatch(addContact(values));\n    const isSuccess = res.requestStatus === 'fulfilled';\n\n    if (isSuccess) {\n      resetForm();\n    }\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .trim()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: Yup.string()\n      .trim()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {({ handleSubmit, values, errors }) => (\n        <form onSubmit={handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <InputControl name=\"name\" label=\"Name\" />\n            <InputControl\n              name=\"number\"\n              label=\"Number\"\n              inputProps={{ type: 'tel' }}\n            />\n            <SubmitButton colorScheme=\"purple\" width=\"full\">\n              Add contact\n            </SubmitButton>\n          </VStack>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useState, useRef } from 'react';\nimport {\n  useDisclosure,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  Box,\n  Button,\n  Heading,\n  Text,\n} from '@chakra-ui/react';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef();\n\n  const handleDelete = () => {\n    setIsDeleting(true);\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n      <Box>\n        <Heading size=\"xs\" textTransform=\"uppercase\">\n          {name}\n        </Heading>\n        <Text pt=\"1\" fontSize=\"sm\">\n          {number}\n        </Text>\n      </Box>\n\n      <Button\n        colorScheme=\"red\"\n        variant=\"outline\"\n        size=\"xs\"\n        type=\"button\"\n        onClick={onOpen}\n        disabled={isDeleting}\n      >\n        {isDeleting ? 'Deleting...' : 'Delete'}\n      </Button>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete Contact\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button colorScheme=\"red\" onClick={handleDelete} ml={3}>\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </Box>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport Contact from 'components/Contact';\nimport { Stack, StackDivider } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Stack divider={<StackDivider />} spacing=\"4\">\n      {contacts.map(contact => (\n        <Contact key={contact.id} {...contact} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { setNameFilter } from 'redux/filters/slice';\nimport { Box, Input } from '@chakra-ui/react';\nimport { FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setNameFilter(e.target.value));\n  };\n\n  // do not show filter without contacts\n  if (contacts.length === 0) {\n    return null;\n  }\n\n  return (\n    <Box my={5}>\n      <FormLabel htmlFor=\"nameFilter\">Find contacts by name</FormLabel>\n      <Input\n        id=\"nameFilter\"\n        name=\"name\"\n        label=\"Email\"\n        onChange={handleChange}\n        autoComplete=\"off\"\n        type=\"search\"\n      />\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { Helmet } from 'react-helmet-async';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm';\nimport ContactsList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Heading,\n  Grid,\n  GridItem,\n  Spinner,\n} from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <Grid templateColumns=\"repeat(auto-fill, minmax(320px, 1fr))\" gap={4}>\n        <GridItem>\n          <Card pos=\"sticky\" top=\"1rem\">\n            <CardHeader>\n              <Heading size=\"md\">New contact</Heading>\n            </CardHeader>\n            <CardBody pt={0}>\n              <ContactForm />\n            </CardBody>\n          </Card>\n        </GridItem>\n\n        <GridItem>\n          <Card minH=\"100%\">\n            <CardHeader pb={0}>\n              <Heading size=\"md\" display=\"flex\" alignItems=\"center\">\n                Contacts ({contacts.length}){' '}\n                {isLoading && <Spinner size=\"sm\" color=\"purple.500\" ml={2} />}\n              </Heading>\n            </CardHeader>\n\n            <CardBody pt={0}>\n              <Filter />\n              <ContactsList />\n            </CardBody>\n          </Card>\n        </GridItem>\n      </Grid>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filters","name","nameFilter","normalizedFilter","trim","toLowerCase","filter","contact","includes","sort","firstContact","secondContact","localeCompare","useSelector","dispatch","useDispatch","toast","useToast","checkIsInContacts","newName","some","onSubmit","values","resetForm","title","description","status","isClosable","position","addContact","res","meta","requestStatus","validationSchema","Yup","matches","required","number","initialValues","handleSubmit","errors","spacing","align","label","inputProps","type","colorScheme","width","id","useState","isDeleting","setIsDeleting","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","display","alignItems","justifyContent","size","textTransform","pt","fontSize","variant","onClick","disabled","leastDestructiveRef","fontWeight","ref","deleteContact","ml","divider","map","length","my","htmlFor","I","onChange","e","setNameFilter","target","value","autoComplete","Contacts","useEffect","fetchContacts","templateColumns","gap","pos","top","minH","pb","color"],"sourceRoot":""}